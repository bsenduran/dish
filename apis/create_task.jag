<%
var caramel;
require('/modules/publisher.js').exec(function (ctx) {
    caramel = require('caramel');
    var carbon = require('carbon');
    var admin_tasks = require('/extensions/assets/dish/modules/admin_tasks.js').tasks;
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/asts/{type}/apis/{pageName}');
    var query = request.getQueryString();
    var log = new Log();
    var type = options.type;

    var getParameterByName = function (name) {
        var match = RegExp(name + '=([^&]*)').exec(query);
        return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    };

    var assetId = getParameterByName('id');

    log.info("Current Asset Id : " + assetId);
    log.info ("Query string : "+ query);

//=================================================================================================


    if (!options) {
        response.sendError(400, 'Could not locate an endpoint for your request.Make sure that you provide an id');
    }
    else if (!assetId) {
        response.sendError(400, 'An id must be provided when viewing details of a particular asset');
    } else {

        // var type = request.getParameter("type");
        var am = asset.createUserAssetManager(session, type);

        var assets = am.get(assetId);
        if (assets == null) {
            response.sendError(404, 'The asset with id: ' + assetId + ' could not be located.');
        } else {

            var dish_name = assets.attributes.overview_name;
            var recipe_name = assets.attributes.overview_recipename;
            var trigger_interval = assets.attributes.overview_triggerinterval;
            var trigger_count = assets.attributes.overview_triggercount;

            // Limit trigger interval
            if (trigger_interval < 5) trigger_interval = 5;

            // Limit trigger count
            if (trigger_count > 10) trigger_count = 10;
            if (trigger_count < 0) trigger_count = 0;

            var ingredients = assets.attributes.ingredient_connectorname;
            var results = assets.attributes.result_connectorname;

            var ingredient_parametersname = assets.attributes.ingredient_parametersname;
            var ingredient_parameter_value = assets.attributes.ingredient_parametersvalue;

            var result_parametersname = assets.attributes.result_parametersname;
            var result_parameter_value = assets.attributes.result_parametersvalue;

            var ingredient_account = assets.attributes.ingredient_account;
            var result_account = assets.attributes.result_account;

            // Generic function to get relevant text value for xml tag
            var getString = function (paramValue) {

                paramValue= paramValue+'';
                var length = paramValue.length;

                // Modify only type-aware places, Note: Still support single type-aware cases
                if (paramValue.indexOf('{') > -1) {
                    // Get type value from session
                    var typeawareType = 'xml';

                    try{
                        typeawareType = session.get('RESULT_FIELD_TYPE');
                    }catch(e){
                        // default value is xml
                        typeawareType = 'xml'
                    }

                    // Create a map with typeaware_term -> mapping_synapse_path
                    var expressionMappedArray = getMappingExpressions(
                            getWordsBetweenCurlies(paramValue),
                            typeawareType
                    );
                    // log.info(expressionMappedArray);

                    paramValue = getFullyEditiedParamValue (paramValue, expressionMappedArray);
                    paramValue = 'fn:concat(' + paramValue + ')';

                    log.info ('Generated XPath : ' + paramValue);

                }

                return paramValue;
            };

            // For use of typeaware
            var getWordsBetweenCurlies = function (str) {
                var results = [], re = /{([^}]+)}/g, text;

                while(text = re.exec(str)) {
                    results.push(text[1]);
                }

                return results;
            };

            // For use of typeaware
            var getMappingExpressions = function (wordArray, typeawareType) {

                var results = [], expValue;

                for (var i in wordArray) {
                    var key = '{' + wordArray[i] + '}';

                    // Create expValue depending on typeaware value
                    if (typeawareType == 'json') {
                        expValue = '{{json-eval($.' + wordArray[i] + ')}}';
                    }
                    else {
                        expValue = '{{$body//' + wordArray[i] + '/text()}}';
                    }

                    results.push(
                            [ key, expValue ]
                    );
                }

                return results;
            };

            // For use of typeaware
            var getFullyEditiedParamValue = function (text, expressionMappedArray){
                // Get a tmp copy
                var replicate = text;

                for (var i in expressionMappedArray) {
                    var entry = expressionMappedArray[i];
                    replicate = replicate.replace(entry[0], entry[1]);
                }
                // log.info('fn:concat(' + replicate + ')' );

                var tmpReplicateArray = replicate.split('');
                replicate = "";

                // Adding commas at proper places
                for(i=0; i < tmpReplicateArray.length; i++){
                    replicate += tmpReplicateArray[i];
                    if ( ( (i+2) < tmpReplicateArray.length) && (tmpReplicateArray[i] == '}' && tmpReplicateArray[i+1] == '}')){
                        replicate += '},';
                        i++;
                    } else if ( ( (i+1) < tmpReplicateArray.length) && (tmpReplicateArray[i+1] == '{' && tmpReplicateArray[i+2] == '{')){

                        if ( ( i > 1) && (tmpReplicateArray[i] != ',') ) {
                            replicate += ',';
                        }
                    }
                }

                var terms = replicate.split(',');
                // log.info(terms);

                // Adding single-quotes for text values
                for (var i in terms) {
                    var entry = terms[i];

                    // Select only the text values
                    if (entry.charAt(0) != '{' && entry.charAt(entry.length-1) != '}') {
                        terms[i] = "'" + entry + "'";
                    }
                }

                // Again combine array with comma separated
                replicate = terms.join(',');

                return replicate;
            };

            var getXMLContent = function (connectors, connectors_param, connector_param_val) {
                var content = "";
                if (connectors instanceof Array) {
                    for (var i in connectors) {

                        var param_names = connectors_param[i].split(',');
                        var param_values = connector_param_val[i].split('\\|');

                        for (var j in param_names) {
                            var connDotPar = connectors[i].trim() + "." + param_names[j].trim();
                            content += "<" + connDotPar + ">" + getString(param_values[j]) + "<\/" + connDotPar + ">";
                        }
                    }
                }
                else {
                    var param_names = connectors_param.split(',');
                    var param_values = connector_param_val.split('|');


                    for (var j in param_names) {
                        var connDotPar = connectors.trim() + "." + param_names[j].trim();
                        content += "<" + connDotPar + ">" + getString(param_values[j]) + "<\/" + connDotPar + ">";
                    }

                }
                return content;

            };

            var server = new carbon.server.Server();
            var regOptions = {username: user.username,  domain: user.tenantDomain , tenantId: user.tenantId};
            var dataStore = new carbon.registry.Registry(server, regOptions);
            var accountContent;


            var getAuthDetail = function (connectors, account) {
                var authContent = "";
                if (connectors instanceof Array) {
                    for (var i in connectors) {
                        var path = "/_system/governance/connections/" + connectors[i].trim() + "/accounts";
                        var res;
                        res = dataStore.get(path);
                        accountContent = JSON.parse(res.content);

                        for (var j in accountContent) {
                            if (j == account[i]) {

                                var authDetailString = accountContent[j];
                                authDetail = JSON.parse(authDetailString);

                                for (var auth in authDetail) {
                                    var nodeName = connectors[i] + "." + auth;
                                    var authElem = "<" + nodeName + ">" + authDetail[auth] + "<\/" + nodeName + ">";
                                    authContent += authElem;
                                }

                            }
                        }
                    }
                } else {
                    var path = "/_system/governance/connections/" + connectors.trim() + "/accounts";
                    var res;
                    res = dataStore.get(path);
                    accountContent = JSON.parse(res.content);

                    for (var j in accountContent) {
                        if (j == account) {

                            var authDetail = JSON.parse(accountContent[j]);

                            for (var auth in authDetail) {

                                var nodeName = connectors + "." + auth;
                                var authElem = "<" + nodeName + ">" + authDetail[auth] + "<\/" + nodeName + ">";
                                authContent += authElem;
                            }

                        }
                    }
                }

                return authContent;
            };

            var callDeployConnectors = function (connection) {

                var uploadConnector = function (libName) {
                   if(!admin_tasks.isConnectorAlreadyDeployed(libName)){
                        admin_tasks.deployConnector(libName);
                    }
                };

                if (connection instanceof Array) {
                    for (var i in connection) {
                        uploadConnector(connection[i]);
                    }
                } else {
                    uploadConnector(connection)
                }

            };

            var enableConnector = function (connection) {
                if (connection instanceof Array) {
                    for (var i in connection) {
                        if (waitForConnectorDeploy(connection[i])) {
                            admin_tasks.enableConnector(connection[i]);
                        }
                    }
                } else {
                    if (waitForConnectorDeploy(connection)) {
                        admin_tasks.enableConnector(connection);
                    }
                }
            };

            var waitForConnectorDeploy = function (connection) {
                // Five attempts before enabling connector
                var countdown = 10;
                while (!admin_tasks.isConnectorAlreadyDeployed(connection) && (countdown > 0) ) {
                    Packages.java.lang.Thread.sleep(3000);
                    countdown --;
                }
                if (countdown == 0) {
                    log.error ('Connector is not deployed with given timeout : ' + connection);
                    return false;
                }

                return true;
            };


            var task_root_node = '<task xmlns="http://www.wso2.org/products/wso2commons/tasks" class="org.apache.synapse.startup.tasks.TemplateMessageExecutor" group="synapse.simple.quartz" name="' + dish_name + '">' +
                    '<trigger count="' + trigger_count + '" interval="' + trigger_interval + '"/>' +
                    '<property xmlns:task="http://www.wso2.org/products/wso2commons/tasks" name="templateParams">' +
                    '<dish.property.root xmlns="">';

            var task_root_closing = '</dish.property.root>' +
                    '</property>' +
                    '<property xmlns:task="http://www.wso2.org/products/wso2commons/tasks" name="templateKey" value="gov:/recipeTemplates/' + recipe_name + '_template"/>' +
                    '</task>';

            var task_content = task_root_node +
                    getAuthDetail(ingredients, ingredient_account) +
                    getXMLContent(ingredients, ingredient_parametersname, ingredient_parameter_value) +
                    getAuthDetail(results, result_account) +
                    getXMLContent(results, result_parametersname, result_parameter_value) +
                    task_root_closing;


            log.info("About to deploy");
            log.info(task_content);

            var isTaskExist = admin_tasks.isTaskExist(dish_name);

            if (isTaskExist == "true") {
                admin_tasks.deleteTaskDescription(dish_name);
            } else {
                callDeployConnectors(ingredients);
                callDeployConnectors(results);
            }

            admin_tasks.deployTemplate(recipe_name, assets.attributes.overview_url);
            admin_tasks.deployTransform(recipe_name, assets.attributes.overview_url);

            Packages.java.lang.Thread.sleep(2000);
            enableConnector(ingredients);
            enableConnector(results);

            admin_tasks.deployTask(task_content);

        }
    }

//=================================================================================================

    if (getParameterByName('test') != 'true') {
        response.sendRedirect('/publisher/asts/dish/dashboard');
    } else {
        // Delete the task
        log.info('System clearing created task creted for testing');
        var dishName = getParameterByName('dishName');
        // log.info(overviewName);

        Packages.java.lang.Thread.sleep(2000);

        admin_tasks.deleteTaskDescription(dishName);

        // Redirects back to deploy page
        response.sendRedirect('/publisher/asts/dish/deploy/' + assetId);
    }
}, request, response, session); %>
